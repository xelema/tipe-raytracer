#ifndef RTUTILITY_H
#define RTUTILITY_H

#include <math.h>
#include <float.h>
#include <stdlib.h>
#include <curand_kernel.h>
#include "ray.hu"
#include "vec3.hu"

// constantes

#define RED {{1, 0, 0}}
#define GREEN {{0, 1, 0}}
#define BLUE {{0, 0, 1}}
#define WHITE {{1, 1, 1}}
#define BLACK {{0, 0, 0}}
#define SKY {{0.784, 0.965, 1}}
const point3 light = {{-1, -1, -1}}; // position de la lumière -> pour "fake shadow"

// fonctions

__host__ __device__ double clamp(double x, double min, double max){
    if (x<min) return min;
    if (x>max) return max;
    return x;
}

__host__ __device__ color write_color_canva(color pixel_color, int nbRayonParPixel){
    
    double r = pixel_color.e[0];
    double g = pixel_color.e[1];
    double b = pixel_color.e[2];
    
    double rapport = 1.0/nbRayonParPixel;

    r = sqrtf(rapport*r);
    g = sqrtf(rapport*g);
    b = sqrtf(rapport*b);

    // ecrit la valeur transposée de [0,255] de chaque composante de couleur (rgb)
    color res = {{(int)(256 * clamp(r, 0.0, 0.999)), (int)(256 * clamp(g, 0.0, 0.999)), (int)(256 * clamp(b, 0.0, 0.999))}};
    return res;
}

// void canva_to_ppm(FILE *out, color* canva){
//     for (int j = hauteur_image-1; j >= 0  ; j--){ 
//         for (int i = 0; i < largeur_image; i++){
//             fprintf(out, "%d %d %d\n", (int)canva[j*largeur_image+i].e[0], (int)canva[j*largeur_image+i].e[1], (int)canva[j*largeur_image+i].e[2]);
//         }
//     }
// }

// nombre aléatoire entre 0 et 1 avec curand_uniform
__device__ double randomDouble1(curandState* globalState, int ind) {
    curandState localState = globalState[ind];
    double res = curand_uniform(&localState);
    globalState[ind] = localState;
    return res;
}

__device__ double randomDouble(curandState* globalState, int ind, double min, double max){
    return min + (max-min)*randomDouble1(globalState, ind);
}

// direction aléatoire
__device__ vec3 random_dir(vec3 normal, curandState* globalState, int ind){
    vec3 dir;

    double u = randomDouble1(globalState, ind);
    double v = randomDouble1(globalState, ind);
    
    double theta = 2*3.1415926535897932385*u;
    double phi = acos(2*v - 1);

    dir.e[0] = cos(theta)*sin(phi);
    dir.e[1] = sin(theta)*sin(phi);
    dir.e[2] = cos(phi);

    if (vec3_dot(dir, normal) >= 0){
        return vec3_normalize(dir);
    }
    else{
        return vec3_negate(vec3_normalize(dir));
    }
}

#endif
